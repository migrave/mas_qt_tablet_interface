#!/usr/bin/env python3
import time
from pyre_base.base_class import PyreBase

import rospy
import actionlib

from std_msgs.msg import ColorRGBA
from naoqi_bridge_msgs.msg import SpeechWithFeedbackAction, SpeechWithFeedbackGoal, BlinkAction, BlinkGoal

msg_data = {
    "header":
    {
        "type": "RESPONSE",
        "version": "0.1.0",
        "metamodel": "migrave-msg-schema.json",
        "timestamp": ""
    },
    "payload":
    {
        "metamodel": "migrave-cmd-schema.json",
        "senderId": "",
        "receiverId": ""
    }
}

class Colors(object):
    cyan = ColorRGBA(r=0., g=1., b=1., a=1.)
    green = ColorRGBA(r=0., g=1., b=0., a=1.)
    blue = ColorRGBA(r=0., g=0., b=1., a=1.)

class ZyreCommunicator(PyreBase):
    def __init__(self, node_name, groups, robot_id, zyre_network_interface):
        '''
        Keyword arguments:
        node_name -- name of the zyre node
        groups -- groups that the node should join
        '''
        super(ZyreCommunicator, self).__init__(node_name=node_name,
                                               groups=groups,
                                               message_types=[],
                                               interface=zyre_network_interface)

        self.robot_id = robot_id
        self.speech_client = actionlib.SimpleActionClient("/speech_action", SpeechWithFeedbackAction)
        self.blink_client = actionlib.SimpleActionClient("/blink", BlinkAction)

    def receive_msg_cb(self, msg_content):
        '''Processes incoming messages. Only listens to messages of type "CMD";
        ignores all other message types

        Keyword arguments:
        msg_content -- a zyre message in string format

        '''
        dict_msg = self.convert_zyre_msg_to_dict(msg_content)
        if dict_msg is None:
            return

        message_type = dict_msg['header']['type']
        if message_type == 'CMD':
            if dict_msg['payload']['receiverId'] == self.robot_id:
                if dict_msg['payload']['type'] == 'SAY':
                    rospy.loginfo('Received SAY request with message {0}'.format(dict_msg['payload']['message']))
                    goal = SpeechWithFeedbackGoal()
                    goal.say = dict_msg['payload']['message']
                    rospy.loginfo("Sending speech message")
                    self.speech_client.send_goal(goal)
                elif dict_msg['payload']['type'] == 'SHOW-EMOTION':
                    blink_goal = BlinkGoal()
                    if dict_msg['payload']['message'] == 'happy':
                        blink_goal.colors = [Colors.cyan]
                    elif dict_msg['payload']['message'] == 'kiss':
                        blink_goal.colors = [Colors.green]
                    else:
                        blink_goal.colors = [Colors.blue]
                    blink_goal.blink_duration.secs = 3
                    blink_goal.blink_rate_mean = 0.5
                    blink_goal.blink_rate_sd = 0.1
                    self.blink_client.send_goal(blink_goal)
                    rospy.sleep(3.)
                    self.blink_client.cancel_all_goals()

if __name__ == '__main__':
    rospy.init_node('nao_qt_tablet_interface')

    qt_id = rospy.get_param('~qt_id', 'qt')
    robot_id = rospy.get_param('~robot_id', 'nao')
    zyre_network_interface = rospy.get_param('~zyre_network_interface', 'wlan0')

    zyre_communicator = ZyreCommunicator(robot_id, ['MIGRAVE'],
                                         robot_id, zyre_network_interface)
    zyre_communicator.start()
    msg_data['payload']['senderId'] = robot_id
    msg_data['payload']['receiverId'] = qt_id
    try:
        while not rospy.is_shutdown():
            rospy.sleep(0.5)
    except (KeyboardInterrupt, SystemExit):
        print('Stopping NAO QT tablet interface')
        zyre_communicator.shutdown()
